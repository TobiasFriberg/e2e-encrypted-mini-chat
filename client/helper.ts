import crypto from 'crypto-js';
import { getBase64 } from './components/imagetransform';

export const utils = {
  passwordRegex: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d\w\W]{8,}$/,
  emailRegex: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/,
};

export const encrypt: any = (text: string = '', key: string = '') => {
  return crypto.AES.encrypt(text, key).toString();
};

export const decrypt = (text: string = '', key: string = '') => {
  let msg = text;
  try {
    const bytes = crypto.AES.decrypt(text, key);
    msg = bytes.toString(crypto.enc.Utf8) || text;
  } catch (e) {
    msg = text;
  }
  return msg;
};

export const decryptImage = async (url: string, key: string) => {
  return fetch(url)
    .then((response) => {
      return response.blob();
    })
    .then(async (blob: any) => {
      const base64 = (await getBase64(blob)).split(';base64,').pop();
      return decrypt(base64, key);
    });
};

export const generateRandomKey = () => {
  const wordList = [
    'abandoned',
    'able',
    'absolute',
    'adorable',
    'adventurous',
    'academic',
    'acceptable',
    'acclaimed',
    'accomplished',
    'accurate',
    'aching',
    'acidic',
    'acrobatic',
    'active',
    'actual',
    'adept',
    'admirable',
    'admired',
    'adolescent',
    'adorable',
    'adored',
    'advanced',
    'afraid',
    'affectionate',
    'aged',
    'aggravating',
    'aggressive',
    'agile',
    'agitated',
    'agonizing',
    'agreeable',
    'ajar',
    'alarmed',
    'alarming',
    'alert',
    'alienated',
    'alive',
    'all',
    'altruistic',
    'amazing',
    'ambitious',
    'ample',
    'amused',
    'amusing',
    'anchored',
    'ancient',
    'angelic',
    'angry',
    'anguished',
    'animated',
    'annual',
    'another',
    'antique',
    'anxious',
    'any',
    'apprehensive',
    'appropriate',
    'apt',
    'arctic',
    'arid',
    'aromatic',
    'artistic',
    'ashamed',
    'assured',
    'astonishing',
    'athletic',
    'attached',
    'attentive',
    'attractive',
    'austere',
    'authentic',
    'authorized',
    'automatic',
    'avaricious',
    'average',
    'aware',
    'awesome',
    'awful',
    'awkward',
    'babyish',
    'bad',
    'back',
    'baggy',
    'bare',
    'barren',
    'basic',
    'beautiful',
    'belated',
    'beloved',
    'beneficial',
    'better',
    'best',
    'bewitched',
    'big',
    'bighearted',
    'biodegradable',
    'bitesized',
    'bitter',
    'black',
    'Abjure',
    'Future',
    'Picnic',
    'Agonistic',
    'Garland',
    'Protect',
    'Airline',
    'Gigantic',
    'Publish',
    'Bandit',
    'Goofy',
    'Quadrangle',
    'Banquet',
    'Government',
    'Recount',
    'Binoculars',
    'Grandnieces',
    'Redoubtable',
    'Biologist',
    'Handbook',
    'Reflection',
    'Blackboard',
    'Himself',
    'Reporter',
    'Board',
    'Indulge',
    'Ring',
    'Bookworm',
    'Inflatable',
    'Salesclerk',
    'Butterscotch',
    'Inimical',
    'Snapshot',
    'Camera',
    'Interim',
    'Shellfish',
    'Campus',
    'Invest',
    'Ship',
    'Catfish',
    'Jackpot',
    'Significance',
    'Carsick',
    'Kitchenette',
    'Sometimes',
    'Celebrate',
    'Law',
    'Sublime',
    'Celery',
    'Life',
    'Tabletop',
    'Citizen',
    'Lifeline',
    'Teamwork',
    'Coloring',
    'Love',
    'Tennis',
    'Compact',
    'Magnificent',
    'Timesaving',
    'Dark',
    'Malevolence',
    'Tree',
    'Damage',
    'Man',
    'Termination',
    'Dangerous',
    'Mascot',
    'Underestimate',
    'Decorum',
    'Marshmallow',
    'Vineyard',
    'Endorse',
    'Mine',
    'War',
    'Engender',
    'Moonwalk',
    'Way',
    'Erratic',
    'Near',
    'Wealth',
    'Envelope',
    'Nephogram',
    'Wednesday',
    'Etymology',
    'Newborn',
    'World',
    'Eyewitness',
    'Noisome',
    'Xerox',
    'Eulogy',
    'Owl',
    'You',
    'Fish',
    'Parenthesis',
    'Zestful',
    'Food',
    'Perpetrator',
    'Foreclose',
    'Phone',
  ];
  const length = wordList.length - 1;
  return [
    wordList[Math.floor(Math.random() * length)].toLocaleLowerCase(),
    wordList[Math.floor(Math.random() * length)].toLocaleLowerCase(),
    wordList[Math.floor(Math.random() * length)].toLocaleLowerCase(),
    wordList[Math.floor(Math.random() * length)].toLocaleLowerCase(),
  ].join('-');
};
